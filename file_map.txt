# File Map: Variables and Functions (d:\ML\StackedML-Perovskites) with file paths

# pipeline_steps.py (d:\ML\StackedML-Perovskites\pipeline_steps.py)
## Functions:
- aggregate_cv_results(outer_fold_results_reg, outer_fold_results_cls):
    Calculates and prints aggregated cross-validation results
    Returns: mean/std for R2, MAE, Accuracy, ROC-AUC

- select_final_model(
    outer_fold_results_reg,
    outer_fold_results_cls,
    all_fold_models_reg,
    all_fold_models_cls,
    fold_scalers,
    fold_selectors,
    fold_selected_features_list,
    feature_names
):
    Selects final models based on best performing fold
    Returns: final models, preprocessing components, and best fold indices

- evaluate_on_test_set(
    final_regressor,
    final_classifier,
    X_test,
    y_test_reg,
    y_test_cls,
    selected_features_final,
    feature_names,
    save_results
):
    Evaluates final models on hold-out test set
    Applies scaling and feature selection from best fold

- run_shap_analysis(
    final_regressor,
    final_classifier,
    X_test,
    selected_features_final,
    feature_names,
    save_results
):
    Performs SHAP analysis on final models
    Includes helper functions:
    - reg_predict_fn(data): Prediction function for regression SHAP
    - cls_predict_proba_fn(data): Prediction function for classification SHAP

- save_artifacts(
    final_regressor,
    final_classifier,
    final_scaler,
    final_selector,
    selected_features_final,
    feature_names,
    save_models,
    save_features,
    save_results,
    output_dir
):
    Saves models, features, and results to output directory


# config.py (d:\ML\StackedML-Perovskites\config.py)

## Variables:
- DATA_FILE = "synthetic_data.csv" # Updated to use synthetic data. !!! CHANGE BACK TO "A2BBO6_matched.csv" FOR REAL DATA !!!
- TEST_SIZE = 0.2  # Proportion of data held out for the final unseen test set
- N_SPLITS_OUTER_CV = 2 # Number of folds for outer cross-validation. !!! SET BACK TO 5 for real data !!!
- RANDOM_STATE = 42   # Set random seed for reproducibility
- FEATURE_SELECTION_METHOD = 'lgbm'
- K_BEST_FEATURES = 50 # Number of features for SelectKBest
- STACKING_CV_FOLDS = 5 # Number of folds for inner CV within stacking meta-learner training
- TUNE_ALL_BASE_MODELS = True # Set this according to preference
- OPTUNA_TRIALS_MAIN = 5  # Number of trials for key models (LGBM/XGB)
- OPTUNA_TRIALS_OTHER = 5 # Number of trials for other base models
- OPTUNA_TIMEOUT = None    # Timeout in seconds for each Optuna study (None for no timeout)
- SHAP_BACKGROUND_SAMPLES = 50
- SHAP_EXPLAIN_SAMPLES = 20
- OUTPUT_DIR = 'results'
- SAVE_MODELS = True # Save the best model from each fold and the final test models
- SAVE_FEATURES = True
- SAVE_RESULTS = True
- STRATIFY_SPLIT = False # Set to True for real data if appropriate



# main.py (d:\ML\StackedML-Perovskites\main.py)

## Variables:
- start_time: Pipeline start timestamp
- df: DataFrame loaded from DATA_FILE
- X: Feature DataFrame (all columns except last two)
- y_reg: Regression target (second to last column)
- y_cls: Classification target (last column)
- feature_names: List of feature names
- stratify_targets: Classification target for stratified split
- X_train_val, X_test: Train/val and test features
- y_train_val_reg, y_test_reg: Train/val and test regression targets
- y_train_val_cls, y_test_cls: Train/val and test classification targets
- COMPUTE_PARAMS: Compute device parameters
- kf_outer: KFold cross-validation instance
- OPTIMIZATION_FUNCTIONS_REG: Dictionary mapping model names to regression optimization functions
- OPTIMIZATION_FUNCTIONS_CLS: Dictionary mapping model names to classification optimization functions
- MODEL_REGRESSORS: Dictionary of base regression models
- MODEL_CLASSIFIERS: Dictionary of base classification models
- STACKING_META_REGRESSOR_CANDIDATES: Dictionary of meta-regressor candidates
- STACKING_META_CLASSIFIER_CANDIDATES: Dictionary of meta-classifier candidates

## Functions:
- None (all functions are imported from other modules)



# model_definitions.py (d:\ML\StackedML-Perovskites\model_definitions.py)
## Variables:
- RANDOM_STATE = 42
- COMPUTE_PARAMS: Dictionary of compute device parameters

## Functions:

- get_base_regressors(random_state): Returns dictionary of regression models
- get_base_classifiers(random_state): Returns dictionary of classification models
- get_meta_regressor_candidates(random_state): Returns dictionary of regression meta-model candidates
- get_meta_classifier_candidates(random_state): Returns dictionary of classification meta-model candidates
- get_final_model_instance(model_type, random_state): Returns final model instance

###optimization functions
- optimize_lgbm_reg(trial, X_tr, y_tr, X_va, y_va, compute_params=None)
- optimize_xgb_reg(trial, X_tr, y_tr, X_va, y_va, compute_params=None)
- optimize_ridge(trial, X_tr, y_tr, X_va, y_va, compute_params=None)
- optimize_rf_reg(trial, X_tr, y_tr, X_va, y_va, compute_params=None)
- optimize_gb_reg(trial, X_tr, y_tr, X_va, y_va, compute_params=None)
- optimize_bayes_ridge(trial, X_tr, y_tr, X_va, y_va, compute_params=None)
- optimize_lgbm_cls(trial, X_tr, y_tr, X_va, y_va, compute_params=None)
- optimize_xgb_cls(trial, X_tr, y_tr, X_va, y_va, compute_params=None)
- optimize_logistic_regression(trial, X_tr, y_tr, X_va, y_va, compute_params=None)
- optimize_rf_cls(trial, X_tr, y_tr, X_va, y_va, compute_params=None)
- optimize_gb_cls(trial, X_tr, y_tr, X_va, y_va, compute_params=None)

- select_best_stack(
    base_model_definitions,
    tuned_base_params,
    meta_candidates,
    X_tr,
    y_tr,
    X_va,
    y_va,
    task,
    cv_folds,
    random_state,
    compute_params
)

# outer_cv.py (d:\ML\StackedML-Perovskites\outer_cv.py)

## Main Function:
- run_outer_cv_loop(X_train_val, y_train_val_reg, y_train_val_cls, kf_outer, feature_names, ...):
    Executes the complete outer cross-validation process including:
    - Data splitting
    - Feature scaling
    - Feature selection
    - Hyperparameter tuning
    - Stacking ensemble training
    - Performance evaluation
    Returns: Results, parameters, and models for each fold

## Variables:
- outer_fold_results_reg: Dictionary storing regression metrics per fold
- outer_fold_results_cls: Dictionary storing classification metrics per fold
- fold_selected_features_list: List of selected features per fold
- fold_best_params_reg: Dictionary of best regression parameters per fold
- fold_best_params_cls: Dictionary of best classification parameters per fold
- fold_scalers: List of fitted scalers
- fold_selectors: List of fitted feature selectors
- all_fold_models_reg: List of best regression stack models
- all_fold_models_cls: List of best classification stack models


## Functions:

- run_outer_cv_loop(
    X_train_val,
    y_train_val_reg,
    y_train_val_cls,
    kf_outer,
    feature_names,
    FEATURE_SELECTION_METHOD,
    K_BEST_FEATURES,
    TUNE_ALL_BASE_MODELS,
    OPTUNA_TRIALS_MAIN,
    OPTUNA_TRIALS_OTHER,
    MODEL_REGRESSORS,
    MODEL_CLASSIFIERS,
    STACKING_META_REGRESSOR_CANDIDATES,
    STACKING_META_CLASSIFIER_CANDIDATES,
    get_compute_device_params,
    run_optuna_study,
    select_best_stack,
    OPTIMIZATION_FUNCTIONS_REG,
    OPTIMIZATION_FUNCTIONS_CLS
)

# utils.py (d:\ML\StackedML-Perovskites\utils.py)

## Variables:
- None (no global variables)

## Functions:
- get_compute_device_params(): Returns CPU-specific compute parameters
- run_optuna_study(objective, X_tr, y_tr, X_va, y_va, n_trials, direction, study_name, timeout=None):
    Runs Optuna hyperparameter optimization study with error handling and visualization
- analyze_hyperparameter_importance(study): Analyzes and prints parameter importance from study
- visualize_study(study, output_dir='results'): Creates and saves visualization plots for study results

## Warnings Configuration:
- Optuna logging set to INFO level
- Suppressed warnings for:
  - LightGBM version warnings
  - Future warnings
  - Divide by zero warnings
  - Optuna experimental feature warnings
  

# test.py
## Test Configuration:
- TEST_OPTUNA_TRIALS_MAIN: Reduced number of trials for main models (3)
- TEST_OPTUNA_TRIALS_OTHER: Reduced number of trials for other models (2)
- TEST_N_SPLITS_OUTER_CV: Reduced number of outer CV folds (2)
- TEST_STACKING_CV_FOLDS: Reduced number of stacking CV folds (2)

## Variables:
- df: Test dataset loaded from DATA_FILE
- X: Feature DataFrame
- y_reg: Regression target
- y_cls: Classification target
- feature_names: List of feature names
- X_train_val, X_test: Train/val and test features
- y_train_val_reg, y_test_reg: Train/val and test regression targets
- y_train_val_cls, y_test_cls: Train/val and test classification targets
- kf_outer: KFold cross-validation instance
- MODEL_REGRESSORS: Dictionary of base regression models
- MODEL_CLASSIFIERS: Dictionary of base classification models
- STACKING_META_REGRESSOR_CANDIDATES: Dictionary of meta-regressor candidates
- STACKING_META_CLASSIFIER_CANDIDATES: Dictionary of meta-classifier candidates
- OPTIMIZATION_FUNCTIONS_REG: Dictionary of regression optimization functions
- OPTIMIZATION_FUNCTIONS_CLS: Dictionary of classification optimization functions

## Structure:
1. Test Configuration
2. Data Loading and Preparation
3. Model and Optimization Function Setup
4. Outer Cross-Validation Loop Execution
5. Results Aggregation and Model Selection
6. Final Evaluation and Visualization

## Imports:
- Standard: time, os, pandas, numpy, collections
- ML: sklearn.model_selection
- Local: All project modules (config, utils, model_definitions, outer_cv, pipeline_steps)
